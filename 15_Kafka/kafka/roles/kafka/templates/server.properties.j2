############################# Server Basics ####################################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id={{kafka_broker_id}}

# Enable automatic broker id generation on the server.
broker.id.generation.enable={{kafka_broker_id_generation_enable}}

# Enable auto creation of topic on the server
auto.create.topics.enable={{kafka_auto_create_topics}}

# Enables delete topic. Delete topic through the admin tool will have no effect
# if this config is turned off
delete.topic.enable={{kafka_delete_topic}}

############################# Socket Server Settings ###########################
{% if kafka_advertised_listeners is defined %}
# Comma-separated list of URIs that will be published to Zookeeper for clients
# to use.
advertised.listeners={{kafka_advertised_listeners}}
{% endif %}

# Listener List - Comma-separated list of URIs we will listen on and their protocols.
# Specify hostname as 0.0.0.0 to bind to all interfaces. Leave hostname empty to
# bind to default interface.
listeners={{kafka_listeners}}

# The number of threads handling network requests
num.network.threads={{kafka_num_network_threads}}

# The number of threads doing disk I/O
num.io.threads={{kafka_num_io_threads}}

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes={{kafka_socket_send_buffer_bytes}}

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes={{kafka_socket_receive_buffer_bytes}}

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes={{kafka_socket_request_max_bytes}}

############################# Security #########################################

# Security protocol used to communicate between brokers
security.inter.broker.protocol={{kafka_security_inter_broker_protocol}}

{% if kafka_ssl_enabled %}
#### Encryption Settings ####
ssl.endpoint.identification.algorithm={{kafka_ssl_endpoint_identification_algorithm}}

ssl.keystore.location={{kafka_ssl_keystore_location}}
ssl.keystore.password={{kafka_ssl_keystore_password}}
ssl.key.password={{kafka_ssl_key_password}}
ssl.truststore.location={{kafka_ssl_truststore_location}}
ssl.truststore.password={{kafka_ssl_truststore_password}}

ssl.client.auth={{kafka_ssl_client_auth}}
{% endif %}

{% if kafka_sasl_enabled %}
#### Authentication Settings ####
# SASL mechanism used for inter-broker communication.
sasl.mechanism.inter.broker.protocol={{kafka_sasl_mechanism_inter_broker_protocol}}

# The list of SASL mechanisms enabled in the Kafka server. The list may contain any mechanism
# for which a security provider is available. Only GSSAPI is enabled by default.
sasl.enabled.mechanisms={{kafka_sasl_enabled_mechanisms}}

############################# ACLs #############################################

# The authorizer class that should be used for authorization
authorizer.class.name={{kafka_authorizer_class_name}}

# If a Resource R has no associated ACLs, no one other than super users is allowed to access R. If you want to change that behavior, set this property to true
allow.everyone.if.no.acl.found={{kafka_allow_everyone_if_no_acl_found}}

{% if kafka_super_users is defined %}
super.users={{kafka_super_users}}
{% endif %}
{% endif %}

############################# Log Basics #######################################

# A comma seperated list of directories under which to store log files
log.dirs={{kafka_data_dir}}

# The number of logical partitions per topic per server. More partitions allow greater parallelism
# for consumption, but also mean more files.
num.partitions={{kafka_num_partitions}}

############################# Log Flush Policy #################################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
log.flush.interval.messages={{kafka_log_flush_interval_messages}}

# The maximum amount of time a message can sit in a log before we force a flush
log.flush.interval.ms={{kafka_log_flush_interval_ms}}

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
log.retention.hours={{kafka_log_retention_hours}}

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
log.retention.bytes={{kafka_log_retention_bytes}}

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes={{kafka_log_segment_bytes}}

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=60000

# By default the log cleaner is disabled and the log retention policy will default to just delete segments after their retention expires.
# If log.cleaner.enable=true is set the cleaner will be enabled and individual logs can then be marked for log compaction.
log.cleaner.enable=false

############################# Zookeeper ########################################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect={{zookeeper_hosts}}

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms={{zookeeper_connection_timeout_ms}}

zookeeper.set.acl={{zookeeper_set_acl}}
